name: OpenShift Deployer
description: OpenShift deployer with route verification
branding:
  icon: package
  color: blue

inputs:
  ### Required
  file:
    description: Template file (e.g. frontend/openshift.deploy.yml)
    required: true
  oc_namespace:
    description: OpenShift namespace (e.g. abc123-dev)
    required: true
  oc_server:
    description: OpenShift server (e.g. https://api.silver.devops.gov.bc.ca:6443)
    required: true
  oc_token:
    description: OpenShift access token
    required: true

  ### Typical / recommended
  overwrite:
    description: Replace existing objects/artifacts? (true|false)
    required: true
  parameters:
    description: Template parameters/variables to pass (e.g. -p ZONE=...)
  timeout:
    description: Timeout for deployment. [default=15m]
    default: "15m"
  triggers:
    description: Omit to always build, otherwise trigger by path; e.g. ('./backend/', './frontend/)
  verification_path:
    description: Sets the health endpoint to be used for verification, does not need '/'
    default: ""

  ### Usually a bad idea / not recommended
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}
  oc_version:
    description: Override default OpenShift CLI (oc) version; e.g. 4.13
  repository:
    description: Optionally, specify a different repo to clone
    default: ${{ github.repository }}
  verification_retry_attempts:
    description: Number of times to attempt deployment verification
    default: "3"
  verification_retry_seconds:
    description: Seconds to wait between deployment verification attempts
    default: "10"

outputs:
  triggered:
    description: Did a deployment trigger?  [true|false]
    value: ${{ steps.deploy.outputs.triggered }}

runs:
  using: composite
  steps:
    - uses: bcgov/action-oc-runner@v1.0.0
      id: prep
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Process template and variables
          TEMPLATE="$(oc process -f ${{ inputs.file }} ${{ inputs.parameters }} --local)"

          # Check for deprecated DeploymentConfig objects
          DC_COUNT=$(echo "${TEMPLATE}" | jq '[.items[] | select(.kind=="DeploymentConfig")] | length')
          if [ "${DC_COUNT}" -gt 0 ]; then
            echo "Error: DeploymentConfig objects are deprecated and no longer supported. Please use Deployment objects instead."
            exit 1
          fi

          # Clean any previous ImageStreams
          for name in $(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="ImageStream").metadata.name'); do
            oc delete imagestream ${name} --ignore-not-found
          done

          # Store template in environment variable using heredoc format for multiline values
          echo "TEMPLATE<<EOF" >> $GITHUB_ENV
          echo "${TEMPLATE}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Count the number of Route objects in $TEMPLATE
          echo "ROUTE_COUNT=$(echo ${TEMPLATE} | jq '[.items[] | select(.kind=="Route")] | length')" >> $GITHUB_ENV

          # Bug mitigation - Docker hates images with capitals in org/repo names
          echo "REPOSITORY=$(echo "${{ inputs.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - uses: bcgov/action-oc-runner@v1.0.0
      id: lite-mode
      if: github.event_name == 'pull_request'
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ env.REPOSITORY }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Apply lite mode modifications for pull requests
          echo "Applying lite mode modifications"
          TEMPLATE=$(echo "${TEMPLATE}" | jq '
            del(.items[] | select(.kind=="HorizontalPodAutoscaler")) |
            del(.items[] | select(.kind=="PodDisruptionBudget")) |
            .items |= map(
              if .kind == "Deployment"
              then .spec.replicas = 1 | .spec.strategy.type = "Recreate"
              else .
              end
            )'
          )

          # Store template in environment variable using heredoc format for multiline values
          echo "TEMPLATE<<EOF" >> $GITHUB_ENV
          echo "${TEMPLATE}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

    - uses: bcgov/action-oc-runner@v1.0.0
      id: deploy
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ env.REPOSITORY }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Expand for deployment steps

          if [ "${{ inputs.overwrite }}" != "false" ]; then
            echo "Overwrite=true; using oc apply"
            oc apply --timeout=${{ inputs.timeout || '15m' }} -f - <<< "${TEMPLATE}"
          else
            # Allow AlreadyExists errors and expected failures
            echo "Overwrite=false; using oc create"
            (set +o pipefail; oc create -f - 2>&1 <<< "${TEMPLATE}" | sed 's/.*: //')
          fi

          # Deployment and Route Host from template (note: DeploymentConfig objects are deprecated and unsupported)
          DEPLOYMENT=$(echo "${TEMPLATE}" | jq '.items[] | select(.kind=="Deployment").metadata.name //empty')

          # Follow any active rollouts
          if [ ! -z "${DEPLOYMENT}" ]&&[ ! -z $(oc get deployment ${DEPLOYMENT} -o name --ignore-not-found) ]; then
            oc rollout status deployment/${DEPLOYMENT} -w
          fi

    - uses: bcgov/action-oc-runner@v1.0.0
      id: verify-routes
      if: env.ROUTE_COUNT
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ env.REPOSITORY }}
        triggers: ${{ inputs.triggers }}
        commands: |
          function verify_route() {
            local url=$1
            local attempts=$2
            local wait_time=$3

            for ((i=1; i<=attempts; i++)); do
              echo "Verification attempt $i of $attempts"
              if HTTP_CODE=$(curl -Lso /dev/null -w "%{http_code}" "${url}"); then
                if [ "${HTTP_CODE}" -eq 200 ]; then
                  echo "Route verification successful!"
                  return 0
                fi
              fi
              echo "HTTP_CODE: ${HTTP_CODE}"
              [ $i -lt $attempts ] && sleep "${wait_time}"
            done
            return 1
          }

          ROUTE_HOST=$(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="Route").spec.host //empty')
          # if [ -z "${ROUTE_HOST}" ]; then
          #   echo "No route found. Skipping verification."
          #   exit 0
          # fi

          ROUTE_PATH=${{ inputs.verification_path }}
          if [ -z "${ROUTE_PATH}" ]; then
            ROUTE_PATH=$(echo "${{ env.template }}" | jq -r '.items[] | select(.kind=="Route").spec.path //empty')
          fi

          URL=$(echo "${ROUTE_HOST}/${ROUTE_PATH}" | sed 's // / g')
          echo "Verifying route: http://${URL}"

          if ! verify_route "${URL}" ${{ inputs.verification_retry_attempts }} ${{ inputs.verification_retry_seconds }}; then
            echo "Route verification failed"
            exit 1
          fi
          
          # Expand for route verification

          # # Get all routes from template
          # ROUTES=$(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="Route") | .spec.host')

          # # Set verification parameters
          # TRIES="${{ inputs.verification_retry_attempts }} || 3"
          # SECONDS="${{ inputs.verification_retry_seconds }} || 10"
          # FAILED=0

          # # Process each route
          # echo "${ROUTES}" | while read -r ROUTE_HOST; do
          #   if [ ! -z "${ROUTE_HOST}" ]; then
          #     # Determine path (custom or from template)
          #     if [ ! -z "${{ inputs.verification_path }}" ]; then
          #       ROUTE_PATH="${{ inputs.verification_path }}"
          #     else
          #       ROUTE_PATH=$(echo "${TEMPLATE}" | jq -r --arg host "${ROUTE_HOST}" \
          #         '.items[] | select(.kind=="Route" and .spec.host==$host) | .spec.path //empty')
          #     fi

          #     # Build full URL
          #     URL=$(echo "${ROUTE_HOST}/${ROUTE_PATH}" | sed 's|//|/|g')
          #     echo -e "\nVerifying route: https://${URL}"

          #     # Attempt verification
          #     for (( i=0; i<"${TRIES}"; i++ )); do
          #       HTTP_CODE=$(curl -Lsko /dev/null -w "%{http_code}" "https://${URL}")
          #       if [ "${HTTP_CODE}" -eq 200 ]; then
          #         echo "✓ Route verification successful for ${URL}"
          #         break
          #       fi
          #       echo "HTTP_CODE:${HTTP_CODE}, Attempt: #$((i+1))/${TRIES}"
          #       if [ $((i+1)) -eq "${TRIES}" ]; then
          #         echo "✗ Route verification failed for ${URL}"
          #         FAILED=1
          #       else
          #         sleep "${SECONDS}"
          #       fi
          #     done
          #   fi
          # done

          # if [ "${FAILED}" -eq 1 ]; then
          #   echo -e "\nOne or more routes failed verification"
          #   exit 1
          # fi

    # Action repo needs to be present for cleanup/tests
    - name: Checkout local repo to make sure action.yml is present
      if: github.repository != inputs.repository
      uses: actions/checkout@v4
