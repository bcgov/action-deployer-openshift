name: OpenShift Deployer
description: OpenShift deployer with route verification
branding:
  icon: package
  color: blue

inputs:
  ### Required
  file:
    description: Template file (e.g. frontend/openshift.deploy.yml)
    required: true
  oc_namespace:
    description: OpenShift namespace (e.g. abc123-dev)
    required: true
  oc_server:
    description: OpenShift server (e.g. https://api.silver.devops.gov.bc.ca:6443)
    required: true
  oc_token:
    description: OpenShift access token
    required: true

  ### Typical / recommended
  overwrite:
    description: Replace existing objects/artifacts? (true|false)
    required: true
  parameters:
    description: Template parameters/variables to pass (e.g. -p ZONE=...)
  post_rollout:
    description: Post deployment command; e.g. oc create job "thing-$(date +%s)" --from=cronjob/thing
  timeout:
    description: Timeout for deployment. [default=15m]
    default: "15m"
  triggers:
    description: Omit to always build, otherwise trigger by path; e.g. ('./backend/', './frontend/)
  verification_path:
    description: Sets the health endpoint to be used for verification, does not need '/'
    default: ""

  ### Usually a bad idea / not recommended
  delete_completed:
    description: Delete completed pods
    default: true
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}
  oc_version:
    description: Override default OpenShift CLI (oc) version; e.g. 4.13
  repository:
    description: Optionally, specify a different repo to clone
    default: ${{ github.repository }}
  verification_retry_attempts:
    description: Number of times to attempt deployment verification
    default: "3"
  verification_retry_seconds:
    description: Seconds to wait between deployment verification attempts
    default: "10"

outputs:
  triggered:
    description: Did a deployment trigger?  [true|false]
    value: ${{ steps.deploy.outputs.triggered }}

runs:
  using: composite
  steps:
    - shell: bash
      id: validate
      run: |
        # Validate required inputs
        for input in "file" "oc_namespace" "oc_server" "oc_token"; do
          if [ -z "${!input}" ]; then
            echo "Error: Required input '$input' is missing"
            exit 1
          fi
        done

        # Validate repository name (OpenShift bug mitigation)
        REPO=${{ inputs.repository }}
        if [[ $REPO != ${REPO,,} ]]; then
          echo -e "An OpenShift bug prevents capital letters in repo names.\n"
          echo -e "Please handle that using the `inputs.repository` parameter.\n"
          exit 1
        fi

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}

    - uses: bcgov/action-oc-runner@v1.0.0
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}
      id: template
      commands: |
        # Process template and store for reuse
        if ! TEMPLATE="$(oc process -f ${{ inputs.file }} ${{ inputs.parameters }} --local)"; then
          echo "Error: Template processing failed"
          exit 1
        fi
        echo "template=${TEMPLATE}" >> $GITHUB_ENV

        # Extract and clean ImageStreams
        IS=$(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="ImageStream").metadata.name //empty')
        IFS=" " read -ra IS <<< "${IS}"
        for i in "${IS[@]}"
        do
          if oc get is "${i}" &>/dev/null; then
            echo "Cleaning up ImageStream ${i}"
            oc delete is/${i}
          fi
        done

    - uses: bcgov/action-oc-runner@v1.0.0
      id: deploy
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}
      commands: |
        TEMPLATE="${{ env.template }}"

        if [ "${{ github.event_name == 'pull_request' }}" ]; then
          echo -e "\nLite mode; skipping HorizontalPodAutoscaler and PodDisruptionBudget objects"
          TEMPLATE=$(echo "${TEMPLATE}" | jq 'del(.items[] | select(.kind=="HorizontalPodAutoscaler"))')
          TEMPLATE=$(echo "${TEMPLATE}" | jq 'del(.items[] | select(.kind=="PodDisruptionBudget"))')

          echo -e "\nLite mode; limiting deployment replicas to 1"
          TEMPLATE=$(echo "${TEMPLATE}" | jq '.items |= map(if .kind == "Deployment" then .spec.replicas = 1 else . end)')

          echo -e "\nLite mode; limiting deployment strategy to Recreate"
          TEMPLATE=$(echo "${TEMPLATE}" | jq '.items |= map(if .kind == "Deployment" then .spec.strategy.type = "Recreate" else . end)')
        fi

        if [ "${{ inputs.overwrite }}" != "false" ]; then
          echo "Overwrite=true; using oc apply"
          oc apply --timeout=${{ inputs.timeout || '15m' }} -f - <<< "${TEMPLATE}"
        else
          # Allow AlreadyExists errors and expected failures
          echo "Overwrite=false; using oc create"
          (set +o pipefail; oc create -f - 2>&1 <<< "${TEMPLATE}" | sed 's/.*: //')
        fi

        # Deployment and Route Host from template (note: DeploymentConfig is deprecated, but still supported)
        DEPLOYMENT=$(echo "${TEMPLATE}" | jq '.items[] | select(.kind=="Deployment").metadata.name //empty')

        # Follow any active rollouts; temporary support for DeploymentConfigs
        if [ ! -z "${DEPLOYMENT}" ]&&[ ! -z $(oc get deployment ${DEPLOYMENT} -o name --ignore-not-found) ]; then
          oc rollout status deployment/${DEPLOYMENT} -w
        elif [ ! -z "${DEPLOYMENT}" ]&&[ ! -z $(oc get deploymentconfig ${DEPLOYMENT} -o name --ignore-not-found) ]; then
          oc rollout status deploymentconfig/${DEPLOYMENT} -w
        fi

    - uses: bcgov/action-oc-runner@v1.0.0
      id: verify
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}
      commands: |
        function verify_route() {
          local url=$1
          local attempts=$2
          local wait_time=$3

          for ((i=1; i<=attempts; i++)); do
            echo "Verification attempt $i of $attempts"
            if HTTP_CODE=$(curl -Lso /dev/null -w "%{http_code}" "${url}"); then
              if [ "${HTTP_CODE}" -eq 200 ]; then
                echo "Route verification successful!"
                return 0
              fi
            fi
            echo "HTTP_CODE: ${HTTP_CODE}"
            [ $i -lt $attempts ] && sleep "${wait_time}"
          done
          return 1
        }

        ROUTE_HOST=$(echo "${{ env.template }}" | jq -r '.items[] | select(.kind=="Route").spec.host //empty')
        if [ -z "${ROUTE_HOST}" ]; then
          echo "No route found. Skipping verification."
          exit 0
        fi

        ROUTE_PATH=${{ inputs.verification_path }}
        if [ -z "${ROUTE_PATH}" ]; then
          ROUTE_PATH=$(echo "${{ env.template }}" | jq -r '.items[] | select(.kind=="Route").spec.path //empty')
        fi

        URL=$(echo "${ROUTE_HOST}/${ROUTE_PATH}" | sed 's // / g')
        echo "Verifying route: http://${URL}"

        if ! verify_route "${URL}" ${{ inputs.verification_retry_attempts }} ${{ inputs.verification_retry_seconds }}; then
          echo "Route verification failed"
          exit 1
        fi

    - uses: bcgov/action-oc-runner@v1.0.0
      if: inputs.post_rollout != ''
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Run post deployment command (optional)
          ${{ inputs.post_rollout }}

          # Cleanup completed pods
          if [ "${{ inputs.delete_completed }}" == "true" ]; then
            echo "Cleaning up completed pods..."
            oc delete pod --field-selector=status.phase==Succeeded --ignore-not-found=true
          fi

    # Action repo needs to be present for cleanup/tests
    - name: Checkout local repo to make sure action.yml is present
      if: github.repository != inputs.repository
      uses: actions/checkout@v4
