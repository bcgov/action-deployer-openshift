name: OpenShift Deployer
description: OpenShift deployer with route verification
branding:
  icon: package
  color: blue

inputs:
  ### Required
  file:
    description: Template file (e.g. frontend/openshift.deploy.yml)
    required: true
  oc_namespace:
    description: OpenShift namespace (e.g. abc123-dev)
    required: true
  oc_server:
    description: OpenShift server (e.g. https://api.silver.devops.gov.bc.ca:6443)
    required: true
  oc_token:
    description: OpenShift access token
    required: true

  ### Typical / recommended
  overwrite:
    description: Replace existing objects/artifacts? (true|false)
    required: true
  parameters:
    description: Template parameters/variables to pass (e.g. -p ZONE=...)
  timeout:
    description: Timeout for deployment. [default=15m]
    default: "15m"
  triggers:
    description: Omit to always build, otherwise trigger by path; e.g. ('./backend/', './frontend/)
  verification_path:
    description: Sets the health endpoint to be used for verification, does not need '/'
    default: ""

  ### Usually a bad idea / not recommended
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}
  oc_version:
    description: Override default OpenShift CLI (oc) version; e.g. 4.13
  repository:
    description: Optionally, specify a different repo to clone
    default: ${{ github.repository }}
  verification_retry_attempts:
    description: Number of times to attempt deployment verification
    default: "3"
  verification_retry_seconds:
    description: Seconds to wait between deployment verification attempts
    default: "10"

outputs:
  triggered:
    description: Did a deployment trigger?  [true|false]
    value: ${{ steps.deploy.outputs.triggered }}

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        # Notify about bugs and/or deprecations

        # Bug mitigation - Docker hates images with capitals in org/repo names
        echo "REPOSITORY=$(echo "${{ inputs.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - uses: actions/checkout@v4
      with:
        repository: ${{ env.REPOSITORY }}

    - uses: bcgov/action-oc-runner@v1.0.0
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ env.REPOSITORY }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Remove any conflicting ImageStreams

          # Process template, consuming variables/parameters
          TEMPLATE="$(oc process -f ${{ inputs.file }} ${{ inputs.parameters }} --local)"

          # Check for deprecated DeploymentConfig objects
          DC_COUNT=$(echo "${TEMPLATE}" | jq '[.items[] | select(.kind=="DeploymentConfig")] | length')
          if [ "${DC_COUNT}" -gt 0 ]; then
            echo "Error: DeploymentConfig objects are deprecated and no longer supported. Please use Deployment objects instead."
            exit 1
          fi

          # Clean any previous ImageStreams
          IS=$(jq -rn "${TEMPLATE} | .items[] | select(.kind==\"ImageStream\").metadata.name //empty")
          IFS=" " read -ra IS <<< "${IS}"
          for i in "${IS[@]}"; do
            [ ! $(oc get is -o name | grep ^imagestream.image.openshift.io/${i}$) ]|| oc delete is/${i}
          done

          # Set template as GitHub environment variable
          echo "TEMPLATE=${TEMPLATE}" >> $GITHUB_ENV
    
    - shell: bash
      run: |
        # Echo TEMPLATE as a test
        echo "${{ env.TEMPLATE }}"

    - uses: bcgov/action-oc-runner@v1.0.0
      id: deploy
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ env.REPOSITORY }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Expand for deployment steps

          # Apply (overwrites) or create (does not overwrite) using processed template
          TEMPLATE="$(oc process -f ${{ inputs.file }} ${{ inputs.parameters }} --local)"

          if [ "${{ github.event_name == 'pull_request' }}" ]; then
            echo -e "\nLite mode; skipping HorizontalPodAutoscaler and PodDisruptionBudget objects"
            TEMPLATE=$(echo "${TEMPLATE}" | jq 'del(.items[] | select(.kind=="HorizontalPodAutoscaler"))')
            TEMPLATE=$(echo "${TEMPLATE}" | jq 'del(.items[] | select(.kind=="PodDisruptionBudget"))')

            echo -e "\nLite mode; limiting deployment replicas to 1"
            TEMPLATE=$(echo "${TEMPLATE}" | jq '.items |= map(if .kind == "Deployment" then .spec.replicas = 1 else . end)')

            echo -e "\nLite mode; limiting deployment strategy to Recreate"
            TEMPLATE=$(echo "${TEMPLATE}" | jq '.items |= map(if .kind == "Deployment" then .spec.strategy.type = "Recreate" else . end)')
          fi
          
          if [ "${{ inputs.overwrite }}" != "false" ]; then
            echo "Overwrite=true; using oc apply"
            oc apply --timeout=${{ inputs.timeout || '15m' }} -f - <<< "${TEMPLATE}"
          else
            # Allow AlreadyExists errors and expected failures
            echo "Overwrite=false; using oc create"
            (set +o pipefail; oc create -f - 2>&1 <<< "${TEMPLATE}" | sed 's/.*: //')
          fi

          # Deployment and Route Host from template (note: DeploymentConfig objects are deprecated and unsupported)
          DEPLOYMENT=$(echo "${TEMPLATE}" | jq '.items[] | select(.kind=="Deployment").metadata.name //empty')

          # Follow any active rollouts
          if [ ! -z "${DEPLOYMENT}" ]&&[ ! -z $(oc get deployment ${DEPLOYMENT} -o name --ignore-not-found) ]; then
            oc rollout status deployment/${DEPLOYMENT} -w
          fi

    - uses: bcgov/action-oc-runner@v1.0.0
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ env.REPOSITORY }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Expand for route verification

          # Process template, consuming variables/parameters
          TEMPLATE="$(oc process -f ${{ inputs.file }} ${{ inputs.parameters }} --local)"

          # Output URL (host + path), but only if ROUTE_HOST is populated
          ROUTE_HOST=$(jq -rn "${TEMPLATE} | .items[] | select(.kind==\"Route\").spec.host //empty")
          if [ ! -z ${ROUTE_HOST} ]; then
            # Path from inputs takes priority over template
            ROUTE_PATH=${{ inputs.verification_path }}
            [ ! -z ${ROUTE_PATH} ]|| \
              ROUTE_PATH=$(jq -rn "${TEMPLATE} | .items[] | select(.kind==\"Route\").spec.path //empty")

            # Remove any duplicate slashes and pass to GITHUB_OUTPUT
            URL=$(echo "${ROUTE_HOST}/${ROUTE_PATH}" | sed 's // / g')
          fi

          # Check for URL (route + path)
          URL_HOST_PATH=${URL:-}
          if [ -z "${URL_HOST_PATH}" ]; then
            echo "No route found. Skipping."
            exit 0
          fi
          echo -e "URL: http://${URL_HOST_PATH}"

          # Curl and verify
          TRIES="${{ inputs.verification_retry_attempts }} || 3"
          SECONDS="${{ inputs.verification_retry_seconds }} || 10"
          for (( i=0; i<"${TRIES}"; i++ )); do
            HTTP_CODE=$(curl -Lso /dev/null -w "%{http_code}" "${URL_HOST_PATH}")
            if [ "${HTTP_CODE}" -eq 200 ]; then
              echo -e "Route verification successful!\n"
              exit 0
            fi
            echo -e "HTTP_CODE:${HTTP_CODE}, Try: #${i}"
            sleep "${SECONDS}"
          done
          echo -e "\nRoute verification failed"
          exit 1

    # Action repo needs to be present for cleanup/tests
    - name: Checkout local repo to make sure action.yml is present
      if: github.repository != inputs.repository
      uses: actions/checkout@v4
