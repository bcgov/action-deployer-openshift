name: OpenShift Deployer
description: OpenShift deployer
branding:
  icon: package
  color: blue

inputs:
  ### Required
  file:
    description: |
      Template file
      Example frontend/openshift.deploy.yml
    required: true
  oc_namespace:
    description: |
      OpenShift namespace
      Example: abc123-dev, abc123-test, abc123-prod
    required: true
    pattern: '^[a-z0-9]{6}-(dev|test|prod|tools)$'
  oc_server:
    description: |
      OpenShift server URL with port
      Example: https://api.silver.devops.gov.bc.ca:6443
    required: true
    pattern: '^https:\/\/.*:6443$'
  oc_token:
    description: |
      OpenShift access token for authentication
      Should be stored as a GitHub secret
    required: true
    minLength: 32

  ### Typical / recommended
  overwrite:
    description: |
      Replace existing objects/artifacts?
      Example: true, false
    default: true
    type: boolean
  parameters:
    description: |
      Template parameters/variables to pass
      Example: -p ZONE=1234
  timeout:
    description: |
      Timeout for deployment
      Example: 30s, 10m, 1h
    default: "15m"
  triggers:
    description: |
      Omit to always build, otherwise trigger by path
      Example: ('./backend/', './frontend/)

  ### Usually a bad idea / not recommended
  diff_branch:
    description: |
      Branch to diff against
      Example: main
    default: ${{ github.event.repository.default_branch }}
  oc_version:
    description: |
      Override default OpenShift CLI (oc) version
      Example: 4.16
    pattern: '^4\.[0-9]+$'
  repository:
    description: |
      Specify a different repo to clone
      Example: bcgov/quickstart-openshift
    default: ${{ github.repository }}
    pattern: '^[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+$'

outputs:
  triggered:
    description: Did a deployment trigger?  [true|false]
    value: ${{ steps.triggers.outputs.triggered }}

runs:
  using: composite
  steps:
    # Send triggers to diff action
    - id: triggers
      uses: bcgov/action-diff-triggers@0d193029efd26c76aeacaa84aba3328de8198370 # v0.2.0
      with:
        triggers: ${{ inputs.triggers }}
        diff_branch: ${{ inputs.diff_branch }}

    - if: inputs.oc_version != '' && steps.triggers.outputs.triggered == 'true'
      uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        oc_version: ${{ inputs.oc_version }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}

    - if: inputs.oc_version == '' && steps.triggers.outputs.triggered == 'true'
      uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}

    - if: steps.triggers.outputs.triggered == 'true'
      shell: bash
      run: |
        # Process template and variables
        TEMPLATE="$(oc process -f ${{ inputs.file }} ${{ inputs.parameters }} --local)"

        # Check for deprecated DeploymentConfig objects
        DC_COUNT=$(echo "${TEMPLATE}" | jq '[.items[] | select(.kind=="DeploymentConfig")] | length')
        if [ "${DC_COUNT}" -gt 0 ]; then
          echo "Error: DeploymentConfig objects are deprecated and no longer supported. Please use Deployment objects instead."
          exit 1
        fi

        # Clean any previous ImageStreams
        for name in $(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="ImageStream").metadata.name'); do
          oc delete imagestream ${name} --ignore-not-found
        done

        # Store template in environment variable using heredoc format for multiline values
        echo "TEMPLATE<<EOF" >> $GITHUB_ENV
        echo "${TEMPLATE}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        # Bug mitigation - Docker hates images with capitals in org/repo names
        echo "REPOSITORY=$(echo "${{ inputs.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - if: github.event_name == 'pull_request' && steps.triggers.outputs.triggered == 'true'
      shell: bash
      run: |
        # Apply lite mode modifications for pull requests
        echo "Applying lite mode modifications"
        TEMPLATE=$(echo "${TEMPLATE}" | jq '
          del(.items[] | select(.kind=="HorizontalPodAutoscaler")) |
          del(.items[] | select(.kind=="PodDisruptionBudget")) |
          .items |= map(
            if .kind == "Deployment"
            then .spec.replicas = 1 | .spec.strategy.type = "Recreate"
            else .
            end
          )'
        )

        # Store template in environment variable using heredoc format for multiline values
        echo "TEMPLATE<<EOF" >> $GITHUB_ENV
        echo "${TEMPLATE}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - if: steps.triggers.outputs.triggered == 'true'
      shell: bash
      run: |
        # Expand for deployment steps
        if [ "${{ inputs.overwrite }}" != "false" ]; then
          echo "Overwrite=true; using oc apply"
          oc apply --timeout=${{ inputs.timeout || '15m' }} -f - <<< "${TEMPLATE}"
        else
          # Allow AlreadyExists errors and expected failures
          echo "Overwrite=false; using oc create"
          (set +o pipefail; oc create -f - 2>&1 <<< "${TEMPLATE}" | sed 's/.*: //')
        fi

        # Follow any active deployments
        DEPLOYMENT=$(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="Deployment").metadata.name //empty')
        if [ ! -z "${DEPLOYMENT}" ]&&[ ! -z $(oc get deployment ${DEPLOYMENT} -o name --ignore-not-found) ]; then
          oc rollout status deployment/${DEPLOYMENT} -w
        fi

    # Action repo needs to be present for cleanup/tests
    - name: Checkout local repo to make sure action.yml is present
      if: github.repository != inputs.repository
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
