name: OpenShift Deployer
description: OpenShift deployer
branding:
  icon: package
  color: blue

inputs:
  ### Required
  file:
    description: Template file (e.g. frontend/openshift.deploy.yml)
    required: true
  oc_namespace:
    description: OpenShift namespace (e.g. abc123-dev)
    required: true
  oc_server:
    description: OpenShift server (e.g. https://api.silver.devops.gov.bc.ca:6443)
    required: true
  oc_token:
    description: OpenShift access token
    required: true

  ### Typical / recommended
  overwrite:
    description: Replace existing objects/artifacts? (true|false)
    required: true
  parameters:
    description: Template parameters/variables to pass (e.g. -p ZONE=...)
  timeout:
    description: Timeout for deployment. [default=15m]
    default: "15m"
  triggers:
    description: Omit to always build, otherwise trigger by path; e.g. ('./backend/', './frontend/)

  ### Usually a bad idea / not recommended
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}
  oc_version:
    description: Override default OpenShift CLI (oc) version; e.g. 4.13
  repository:
    description: Optionally, specify a different repo to clone
    default: ${{ github.repository }}

outputs:
  triggered:
    description: Did a deployment trigger?  [true|false]
    value: ${{ steps.triggers.outputs.triggered }}

runs:
  using: composite
  steps:
    - uses: bcgov/action-oc-runner@v1.1.0
      id: triggers
      with:
        oc_namespace: ${{ inputs.oc_namespace }}
        oc_token: ${{ inputs.oc_token }}
        oc_server: ${{ inputs.oc_server }}
        ${{ inputs.oc_version && format('oc_version: {0}', inputs.oc_version) }}
        repository: ${{ inputs.repository }}
        triggers: ${{ inputs.triggers }}
        commands: |
          # Process template and variables
          TEMPLATE="$(oc process -f ${{ inputs.file }} ${{ inputs.parameters }} --local)"

          # Check for deprecated DeploymentConfig objects
          DC_COUNT=$(echo "${TEMPLATE}" | jq '[.items[] | select(.kind=="DeploymentConfig")] | length')
          if [ "${DC_COUNT}" -gt 0 ]; then
            echo "Error: DeploymentConfig objects are deprecated and no longer supported. Please use Deployment objects instead."
            exit 1
          fi

          # Clean any previous ImageStreams
          for name in $(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="ImageStream").metadata.name'); do
            oc delete imagestream ${name} --ignore-not-found
          done

          # Store template in environment variable using heredoc format for multiline values
          echo "TEMPLATE<<EOF" >> $GITHUB_ENV
          echo "${TEMPLATE}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Bug mitigation - Docker hates images with capitals in org/repo names
          echo "REPOSITORY=$(echo "${{ inputs.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - if: github.event_name == 'pull_request' && steps.triggers.outputs.triggered == 'true'
      shell: bash
      run: |
        # Apply lite mode modifications for pull requests
        echo "Applying lite mode modifications"
        TEMPLATE=$(echo "${TEMPLATE}" | jq '
          del(.items[] | select(.kind=="HorizontalPodAutoscaler")) |
          del(.items[] | select(.kind=="PodDisruptionBudget")) |
          .items |= map(
            if .kind == "Deployment"
            then .spec.replicas = 1 | .spec.strategy.type = "Recreate"
            else .
            end
          )'
        )

        # Store template in environment variable using heredoc format for multiline values
        echo "TEMPLATE<<EOF" >> $GITHUB_ENV
        echo "${TEMPLATE}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - if: steps.triggers.outputs.triggered == 'true'
      shell: bash
      run: |
        # Expand for deployment steps
        if [ "${{ inputs.overwrite }}" != "false" ]; then
          echo "Overwrite=true; using oc apply"
          oc apply --timeout=${{ inputs.timeout || '15m' }} -f - <<< "${TEMPLATE}"
        else
          # Allow AlreadyExists errors and expected failures
          echo "Overwrite=false; using oc create"
          (set +o pipefail; oc create -f - 2>&1 <<< "${TEMPLATE}" | sed 's/.*: //')
        fi

        # Follow any active deployments
        DEPLOYMENT=$(echo "${TEMPLATE}" | jq -r '.items[] | select(.kind=="Deployment").metadata.name //empty')
        if [ ! -z "${DEPLOYMENT}" ]&&[ ! -z $(oc get deployment ${DEPLOYMENT} -o name --ignore-not-found) ]; then
          oc rollout status deployment/${DEPLOYMENT} -w
        fi

    # Action repo needs to be present for cleanup/tests
    - name: Checkout local repo to make sure action.yml is present
      if: github.repository != inputs.repository
      uses: actions/checkout@v4
