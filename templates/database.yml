apiVersion: template.openshift.io/v1
kind: Template
parameters:
  - name: NAME
    description: Module name
    value: action-deployer-openshift
  - name: COMPONENT
    description: Component name
    value: database
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: PVC_MOUNT_PATH
    description: Where to mount the PVC, subpath (e.g. data/)
    value: /var/lib/postgresql
  - name: DB_PVC_SIZE
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    required: true
    value: 256Mi
  - name: DB_PASSWORD
    description: Password for the PostgreSQL connection user.
    from: "[a-zA-Z0-9]{16}"
    generate: expression
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: "${NAME}-${ZONE}-${COMPONENT}"
      labels:
        app: ${NAME}-${ZONE}
        component: ${COMPONENT}
    stringData:
      database-name: "${NAME}"
      database-password: "${DB_PASSWORD}"
      database-user: "${NAME}"
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-from-openshift-ingress
      labels:
        app: ${NAME}-${ZONE}
        component: ${COMPONENT}
        template: openshift-test
    spec:
      podSelector: {}
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      policyTypes:
        - Ingress
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-same-namespace
      labels:
        app: ${NAME}-${ZONE}
        component: ${COMPONENT}
        template: quickstart-network-security-policy
    spec:
      podSelector: {}
      ingress:
        - from:
            - podSelector: {}
      policyTypes:
        - Ingress
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${NAME}-${ZONE}-${COMPONENT}"
      labels:
        app: ${NAME}-${ZONE}
        component: ${COMPONENT}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${DB_PVC_SIZE}"
      storageClassName: netapp-file-standard
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: "${NAME}-${ZONE}-${COMPONENT}"
      labels:
        app: ${NAME}-${ZONE}
        component: ${COMPONENT}
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: "${NAME}-${ZONE}-${COMPONENT}"
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: "${NAME}-${ZONE}-${COMPONENT}"
          labels:
            app: ${NAME}-${ZONE}
            component: ${COMPONENT}
            deployment: "${NAME}-${ZONE}-${COMPONENT}"
        spec:
          volumes:
            - name: "${NAME}-${ZONE}-${COMPONENT}"
              persistentVolumeClaim:
                claimName: "${NAME}-${ZONE}-${COMPONENT}"
          containers:
            - name: "${NAME}"
              image: ghcr.io/bcgov/nr-containers/postgres:12.19
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - -c
                    - psql -q -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 1
              livenessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - -c
                    - psql -q -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 1
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-${COMPONENT}"
                      key: database-name
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-${COMPONENT}"
                      key: database-password
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-${COMPONENT}"
                      key: database-user
              volumeMounts:
                - name: "${NAME}-${ZONE}-${COMPONENT}"
                  mountPath: "${PVC_MOUNT_PATH}"
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
        component: ${COMPONENT}
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        deployment: "${NAME}-${ZONE}-${COMPONENT}"
      sessionAffinity: None
      type: ClusterIP
